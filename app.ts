//–§—É–Ω–∫—Ü–∏—è
function getFullName(firstname, surname) {
    return `${firstname}  ${surname}`;
}

//–°—Ç—Ä–µ–ª–æ—á–Ω–∞—è
const getFullNameArrow = (firstname: string, surname: string): string => {
    return `${firstname}  ${surname}`;
}

console.log(getFullName(true, false));



function getFullName12(userEnt):string {
    return `${userEnt.firstname}  ${userEnt.surname}`;
}

const user = {
    firstname: 'Ann', 
    surname: 'Smith',
    city: 'USA',
    age: 23
}

console.log(getFullName12(user));

//enum (–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ)
enum Status {
    Success = 200,
    NotFound = 404,
    ServerError = 500
  }
  
  console.log(Status.Success); // 200
  console.log(Status[404]);    // "NotFound"


  //Union
function logId(id: string | number | boolean) {
    console.log(id);
}

logId(1);
logId('lklk');
logId(true);

const arr = ['sdf', 1];

function logId2(id: string | number | boolean) {
    if (typeof id === 'string') {
        console.log(id.toLowerCase)
    } else if (typeof id === 'number') {
        console.log(id)
    } else {
        console.log(id)
    }
}

function logError(err: string | string[]) {
    if (Array.isArray(err)) {
        console.log(err)
    } else {
        console.log(err)
    }
}

function logObject(obj: {a : number} | {b : number}) {
    if ('a' in obj) {
        console.log(obj.a)
    } else {
        console.log(obj.b)
    }
}

// Literal Types
function fetchWithAuth(url: string, method: 'post' | 'get'){
}
fetchWithAuth('s', 'post');
fetchWithAuth('p', 'get');
fetchWithAuth('l', '1')

let a: '123iii' = '123iii'
a = '124'

//Type Aliases
type User = {
    name: string,
    age: number,
    skills: string[]
}
let user2: User = {
    name: 'asd',
    age: 23,
    skills: ['1', '2']
}

//–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface User3 {
    name: string,
    age: number,
    skills: string[]

    log: (id: number) => string
}

interface Role {
    roleId: number;
}
interface UserWithRole extends User3, Role {
    createdAT: Date;
}

let user3: UserWithRole = {
    name: 'asd',
    age: 23,
    skills: ['1', '2'],
    roleId: 1,
    createdAT: new Date(),

    log(id) {
        return 'Hello'
    },
}

interface UserDic {
    [index: number]: User
}

type UserDic2 = {
    [index: number]: User
}

// Types –∏–ª–∏ interfaces
interface User24 {
    name: string
}
interface User24 {
    age: number
}
const user24: User24 = {
    name: 'as',
    age: 33
}

type ID = string | number;
interface IDI {
    ID: string | number
}


//–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
interface User25 {
    login: string;
    password?: string; //? –æ–ø—Ü–∏—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
}
const user25: User25 = {
    login: "123156",
    //password: "1231" 
}

interface UserPro {
    login: string;
    password?: {
        type: 'primary' | 'secondary'
    }
}
//–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
function testPass(user: UserPro) {
    const t = user.password ? user.password.type : undefined
    const p = user.password?.type
}

function test(param?: string) {
    const t = param ?? console.log('anu')
}

//Void - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
function logMessage(message: string): void {
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ:", message);
}

logMessage("–ü—Ä–∏–≤–µ—Ç!"); // –í—ã–≤–µ–¥–µ—Ç: –°–æ–æ–±—â–µ–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç!

//Unknown —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ç–∏–ø, —á–µ–º any, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç:
//"–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫–æ–π –∑–¥–µ—Å—å —Ç–∏–ø, –Ω–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–∞."
//–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
function processValue(value: unknown) {
    if (typeof value === "string") {
        console.log("–≠—Ç–æ —Å—Ç—Ä–æ–∫–∞:", value.toUpperCase()); // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    } else if (typeof value === "number") {
        console.log("–≠—Ç–æ —á–∏—Å–ª–æ:", value.toFixed(2)); // ‚úÖ –û–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–æ –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    } else {
        console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö");
    }
}

processValue("hello"); // –í—ã–≤–µ–¥–µ—Ç: –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞: HELLO
processValue(42.5678); // –í—ã–≤–µ–¥–µ—Ç: –≠—Ç–æ —á–∏—Å–ª–æ: 42.57
processValue(true); // –í—ã–≤–µ–¥–µ—Ç: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö

// never
type Status2 = "success" | "error";

function processStatus(status: Status2) {
    switch (status) {
        case "success":
            console.log("–£—Å–ø–µ—à–Ω–æ!");
            break;
        case "error":
            console.log("–û—à–∏–±–∫–∞!");
            break;
        default:
            const _exhaustiveCheck: never = status; // ‚ùå –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å!
            throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å!");
    }
}

processStatus("success"); // ‚úÖ –û–∫
processStatus("error"); // ‚úÖ –û–∫
// processStatus("pending"); // ‚ùå –û—à–∏–±–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ "pending" –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ `Status`

type NotAllowed = never; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Ç–∏–ø–æ–º `never` –Ω–µ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
let something: NotAllowed; // ‚ùå –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø—É `never`

function emergencyShutdown(reason: string): never {
    throw new Error("–ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê! –ü—Ä–∏—á–∏–Ω–∞: " + reason);
}

// üî• –ï—Å–ª–∏ –∑–∞–≤–æ–¥ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞–µ—Ç—Å—è, —Å–∏—Å—Ç–µ–º–∞ –∞–≤–∞—Ä–∏–π–Ω–æ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è
emergencyShutdown("–ü–µ—Ä–µ–≥—Ä–µ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!"); // ‚ùå –†–∞–±–æ—Ç–∞ –∑–∞–≤–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞

function callCenter(): never {
    while (true) {
        console.log("–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ –ª–∏–Ω–∏–∏, –≤–∞—à –∑–≤–æ–Ω–æ–∫ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å...");
    }
}

// ‚òéÔ∏è –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å–∞–º –ø–æ —Å–µ–±–µ
callCenter();

//Nul

let aa: null = null;        // –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –∑–¥–µ—Å—å "–Ω–∏—á–µ–≥–æ"
let bb: undefined;          // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –µ–π –Ω–µ –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ

console.log(aa); // üëâ null
console.log(bb); // üëâ undefined


//–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
let a31 = 5;
let b31: string = a31.toString()

let c31 = 'sdf';
let d31: number = parseInt(c31) //+c31

interface User31 {
    name31: string;
    email31: string;
    login31: string;
}

const user31: User31 = {
    name31: '–í–∞—Å—è',
    email31: 'vasilii@ya.ru',
    login31: 'vasi'
}

interface Admin {
    name: string;
    role: number;
}

// Type Guard
function loogId(id: string | number) {
    if (typeof id === 'string') {
        console.log(id)
    } else if (typeof id === 'number') {
        console.log(id)
    }
    id
}

function loogId2(id: string | number) {
    if (isString(id)) {
        console.log(id)
    } else if (typeof id === 'number') {
        console.log(id)
    }
    id
}
function isString(x: string | number): x is string {
    return typeof x === 'string';
}

function isAdmin(user: User | Admin): user is Admin {
    return 'role' in user;
}

function isAdminAlternativ(user: User | Admin): user is Admin {
    return (user as Admin).role !== undefined;
}

function serRoleZero(user: User | Admin) {
    if (isAdmin(user)) {
        user.role = 0;
    } else {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω');
    }
}

//video_033 –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ typegard

//–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IPayment, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
interface IPayment {
    sum: number;
    from: number;
    to: number;
}

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–∞
enum PaymentStatus {
    Success = 'success',
    Failed = 'failed'
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂
interface IPaymnetReqest extends IPayment {}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç databaseId)
interface IDataSuccess extends IPayment {
    databaseId: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–æ—à–∏–±–∫–∞)
interface IDataFailed {
    errorMessage: string;
    errorCode: number;
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
interface IResponseSuccess {
    status: PaymentStatus.Success;
    data: IDataSuccess; // –¢–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (IDataSuccess)
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
interface IResponseFailed {
    status: PaymentStatus.Failed;
    data: IDataFailed; // –û—Å—Ç–∞–≤–ª—è–µ–º IDataFailed, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞
}

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ
type f = (res: IResponseSuccess | IResponseFailed) => number;

// –û–±—â–∏–π —Ç–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
type Res = IResponseSuccess | IResponseFailed;

// –§—É–Ω–∫—Ü–∏—è Type Guard, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–º
function isSuccess(res: Res): res is IResponseSuccess {
    if (res.status === PaymentStatus.Success) {
        return true
    };
    return false
}

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç ID –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
function getIdFromData(res: Res): number {
    if (isSuccess(res)) { // —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–æ–¥–∞ (res.status === PaymentStatus.Success)
        return res.data.databaseId; // –¢–µ–ø–µ—Ä—å TypeScript –Ω–µ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É
    } else {
        throw new Error(res.data.errorMessage);
    }
}
